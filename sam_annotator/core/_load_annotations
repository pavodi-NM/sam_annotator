from typing import List, Dict
import os
import cv2
import numpy as np
import time

class AnnotationLoader:
    def _load_annotations(self, image_path: str) -> List[Dict]:
        """Load annotations from label file and reconstruct masks."""
        annotations = []
        try:
            # Get paths and check if label exists
            base_name = os.path.splitext(os.path.basename(image_path))[0]
            label_path = os.path.join(self.annotations_path, f"{base_name}.txt")
            
            if not os.path.exists(label_path):
                return annotations
            
            # Get original image dimensions
            original_image = cv2.imread(image_path)
            orig_height, orig_width = original_image.shape[:2]
            
            # Get display dimensions (current image is already resized)
            display_height, display_width = self.image.shape[:2]
            
            with open(label_path, 'r') as f:
                for line in f:
                    parts = line.strip().split()
                    class_id = int(parts[0])
                    
                    # First convert normalized coordinates to original pixel space
                    orig_points = []
                    for i in range(1, len(parts), 2):
                        x = float(parts[i]) * orig_width
                        y = float(parts[i + 1]) * orig_height
                        orig_points.append([[int(x), int(y)]])
                    
                    # Convert to numpy array for processing
                    orig_contour = np.array(orig_points, dtype=np.int32)
                    
                    # Scale points to display size
                    scale_x = display_width / orig_width
                    scale_y = display_height / orig_height
                    display_contour = orig_contour.copy()
                    display_contour[:, :, 0] = orig_contour[:, :, 0] * scale_x
                    display_contour[:, :, 1] = orig_contour[:, :, 1] * scale_y
                    display_contour = display_contour.astype(np.int32)
                    
                    # Create mask at display size
                    mask = np.zeros((display_height, display_width), dtype=bool)
                    cv2.fillPoly(mask, [display_contour], 1)
                    
                    # Calculate bounding box for display size
                    x, y, w, h = cv2.boundingRect(display_contour)
                    display_box = [x, y, x + w, y + h]
                    
                    # Scale the box to original dimensions
                    original_box = [
                        int(x / scale_x),
                        int(y / scale_y),
                        int((x + w) / scale_x),
                        int((y + h) / scale_y)
                    ]
                    
                    # Prepare contour in the format our visualization expects
                    # Flatten the nested structure for better compatibility
                    contour_list = display_contour.tolist()
                    if len(contour_list) > 0 and isinstance(contour_list[0], list) and len(contour_list[0]) == 1:
                        contour_list = [point[0] for point in contour_list]
                    
                    # Create the annotation with all needed fields
                    annotations.append({
                        'id': len(annotations),
                        'class_id': class_id,
                        'class_name': self.class_names[class_id],
                        'mask': mask,
                        'contour': contour_list,
                        'contour_points': display_contour,  # Keep for backward compatibility
                        'display_box': display_box,
                        'box': original_box,
                        'original_contour': orig_contour,  # Keep original for saving
                        'area': cv2.contourArea(display_contour),
                        'metadata': {
                            'annotation_mode': 'imported',
                            'timestamp': time.time()
                        }
                    })
                    
            self.logger.info(f"Loaded {len(annotations)} annotations from {label_path}")
            
        except Exception as e:
            self.logger.error(f"Error loading annotations: {str(e)}")
            import traceback
            self.logger.error(traceback.format_exc())
            
        return annotations 